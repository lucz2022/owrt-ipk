name: Build OpenWrt IPKs (23.05.5 x86_64)

on:
  workflow_dispatch:
    inputs:
      sdk_url:
        description: "SDK URL"
        default: "https://downloads.openwrt.org/releases/23.05.5/targets/x86/64/openwrt-sdk-23.05.5-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        type: string
      pkgs:
        description: "包名:feed（空格分隔）"
        default: "luci-app-openclash:openclash luci-app-ssr-plus:helloworld luci-app-turboacc:turboacc"
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DL_DIR: ${{ github.workspace }}/dl
      CCACHE_DIR: ${{ github.workspace }}/ccache
      JOBS: 8
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip \
            zlib1g-dev file wget ccache curl

      - uses: actions/cache@v4
        with: { path: ${{ env.DL_DIR }}, key: dl-${{ github.run_id }}, restore-keys: dl- }
      - uses: actions/cache@v4
        with: { path: ${{ env.CCACHE_DIR }}, key: ccache-${{ github.run_id }}, restore-keys: ccache- }

      - name: Download SDK (mirror fallback)
        shell: bash
        run: |
          set -euxo pipefail
          export GIT_TERMINAL_PROMPT=0
          git config --global url.https://github.com/.insteadOf git@github.com:
          SDK_URL="${{ inputs.sdk_url }}"
          TUNA="${SDK_URL/https:\/\/downloads.openwrt.org/https:\/\/mirrors.tuna.tsinghua.edu.cn/openwrt}"
          SAU="${SDK_URL/https:\/\/downloads.openwrt.org/https:\/\/mirrors4.sau.edu.cn/openwrt}"
          TAR="$(basename "$SDK_URL")"
          for U in "$SDK_URL" "$TUNA" "$SAU"; do
            echo "try $U"; curl -fL --retry 4 -C - -o "$TAR" "$U" && break
          done
          tar -xJf "$TAR"
          echo "SDK_DIR=$(ls -d openwrt-sdk-23.05.5-x86-64_* | head -n1)" >> $GITHUB_ENV

      - name: Prepare feeds
        working-directory: ${{ env.SDK_DIR }}
        run: |
          cat > feeds.conf.default <<'EOF'
          src-git packages  https://git.openwrt.org/feed/packages.git;openwrt-23.05
          src-git luci      https://git.openwrt.org/project/luci.git;openwrt-23.05
          src-git routing   https://git.openwrt.org/feed/routing.git;openwrt-23.05
          src-git telephony https://git.openwrt.org/feed/telephony.git;openwrt-23.05
          src-git helloworld https://github.com/fw876/helloworld
          src-git openclash  https://github.com/vernesong/OpenClash
          src-git turboacc   https://github.com/chenmozhijin/turboacc.git
          EOF
          ./scripts/feeds clean
          ./scripts/feeds update -a
          # 常见依赖放进源码树（不是装到路由）
          ./scripts/feeds install -p packages bash curl ca-bundle unzip ruby ruby-yaml ip-full dnsmasq-full || true

      - name: Install selected feed packages
        working-directory: ${{ env.SDK_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          for kv in ${{ inputs.pkgs }}; do
            pkg="${kv%%:*}"; feed="${kv##*:}"
            ./scripts/feeds install -p "$feed" "$pkg"
          done
          find package/feeds -maxdepth 2 -type d -name 'luci-app-*' -print || true

      - name: Defconfig (minimal)
        working-directory: ${{ env.SDK_DIR }}
        run: |
          rm -f .config .config.old
          make defconfig
          printf "%s\n" "CONFIG_DEVEL=y" "CONFIG_CCACHE=y" \
            "# CONFIG_ALL is not set" "# CONFIG_ALL_KMODS is not set" "# CONFIG_ALL_NONSHARED is not set" >> .config
          make defconfig

      - name: Build IPKs
        working-directory: ${{ env.SDK_DIR }}
        shell: bash
        run: |
          set -euxo pipefail
          build_one () {
            local name="$1"
            local dir; dir="$(find package/feeds -type d -name "$name" | head -n1 || true)"
            [[ -z "$dir" ]] && dir="package/$name"
            echo "BUILD $name -> $dir"
            make "$dir/download" -j"${JOBS}" V=s
            make "$dir/compile"  -j"${JOBS}" V=s
          }
          for kv in ${{ inputs.pkgs }}; do build_one "${kv%%:*}"; done

      - name: Collect & Upload
        working-directory: ${{ env.SDK_DIR }}
        run: |
          mkdir -p _out
          find bin/packages -type f -name "*.ipk" -exec cp -v {} _out/ \; || true
        continue-on-error: true
      - uses: actions/upload-artifact@v4
        with: { name: ipks-23.05.5-x86_64, path: ${{ env.SDK_DIR }}/_out, if-no-files-found: warn }
