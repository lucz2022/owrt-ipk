name: Build SSR Plus + TurboACC (23.05.5 x86_64, resumable)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SDK_VER: 23.05.5
      TARGET: x86/64
      SDK_DIR: ${{ github.workspace }}/sdk
      DL_DIR:  ${{ github.workspace }}/dl
      CCACHE_DIR: ${{ github.workspace }}/ccache
    steps:
      - uses: actions/checkout@v4

      - name: Install deps (Ubuntu 24.04)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev rsync unzip zlib1g-dev file \
            wget curl ccache python3 python3-pip python3-venv python3-setuptools
          python3 -m pip install --upgrade pip setuptools wheel

      - name: Prepare dirs
        run: |
          mkdir -p "${DL_DIR}" "${CCACHE_DIR}" "${SDK_DIR}"

      # ---------- Restore caches (失败也会在末尾 save) ----------
      - name: Restore cache: dl
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ env.SDK_VER }}-x86_64-${{ hashFiles('**/feeds.conf.default','**/seed.config') }}
          restore-keys: |
            dl-${{ env.SDK_VER }}-x86_64-

      - name: Restore cache: ccache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ env.SDK_VER }}-x86_64-${{ github.ref_name }}
          restore-keys: |
            ccache-${{ env.SDK_VER }}-x86_64-

      - name: Restore cache: host toolchains
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.SDK_DIR }}/staging_dir/host
            ${{ env.SDK_DIR }}/staging_dir/hostpkg
            ${{ env.SDK_DIR }}/build_dir/host
            ${{ env.SDK_DIR }}/build_dir/target-x86_64_musl/host
          key: host-${{ env.SDK_VER }}-x86_64-${{ hashFiles('**/feeds.conf.default','**/seed.config') }}
          restore-keys: |
            host-${{ env.SDK_VER }}-x86_64-

      # ---------- 下载并解压 SDK 到固定路径 ----------
      - name: Download & unpack SDK (with mirror fallback)
        shell: bash
        run: |
          set -e
          URL="https://downloads.openwrt.org/releases/${SDK_VER}/targets/${TARGET}/openwrt-sdk-${SDK_VER}-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          TUNA="${URL/https:\/\/downloads.openwrt.org/https:\/\/mirrors.tuna.tsinghua.edu.cn/openwrt}"
          SAU="${URL/https:\/\/downloads.openwrt.org/https:\/\/mirrors4.sau.edu.cn/openwrt}"
          if [ ! -f "${SDK_DIR}/include/toplevel.mk" ]; then
            for U in "$URL" "$TUNA" "$SAU"; do
              echo "try $U"
              curl -fL --retry 4 -C - -o sdk.tar.xz "$U" && break
            done
            tar -xJf sdk.tar.xz
            src_dir="$(ls -d openwrt-sdk-${SDK_VER}-x86-64_* | head -n1)"
            rsync -a --delete "$src_dir"/ "${SDK_DIR}/"
            rm -rf "$src_dir"
          fi
          # 让 SDK 使用外部 dl 与 ccache
          ln -sfn "${DL_DIR}" "${SDK_DIR}/dl"
          echo "CCACHE_DIR=${CCACHE_DIR}" >> $GITHUB_ENV
          echo "SDK ready at: ${SDK_DIR}"

      # ---------- 准备 feeds：官方 + helloworld + turboacc（仅 LuCI） ----------
      - name: Prepare feeds
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          cat > feeds.conf.default <<'EOF'
src-git packages  https://git.openwrt.org/feed/packages.git;openwrt-23.05
src-git luci      https://git.openwrt.org/project/luci.git;openwrt-23.05
src-git routing   https://git.openwrt.org/feed/routing.git;openwrt-23.05
src-git telephony https://git.openwrt.org/feed/telephony.git;openwrt-23.05
src-git helloworld https://github.com/fw876/helloworld
src-git turboacc   https://github.com/chenmozhijin/turboacc.git
EOF
          ./scripts/feeds clean
          ./scripts/feeds update -a
          # 只把两个 LuCI 包装入源码树
          ./scripts/feeds install -p helloworld luci-app-ssr-plus
          ./scripts/feeds install -p turboacc   luci-app-turboacc

      # ---------- 种子 .config：SSR 只启用 libev；TurboACC 仅装 LuCI ----------
      - name: Seed .config (libev-only SSR, TurboACC UI)
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          cat > seed.config <<'EOF'
CONFIG_TARGET_x86=y
CONFIG_TARGET_x86_64=y

# LuCI: SSR Plus
CONFIG_PACKAGE_luci-app-ssr-plus=y
# 仅启用 libev（纯 C，不拉 Rust/Go）
CONFIG_PACKAGE_shadowsocksr-libev-ssr-redir=y
CONFIG_PACKAGE_shadowsocksr-libev-ssr-local=y
CONFIG_PACKAGE_shadowsocksr-libev-ssr-check=y
CONFIG_PACKAGE_shadowsocksr-libev-ssr-server=n
# 关闭重型可选项（不存在也无碍）
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_SingBox is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Hysteria is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan_GO is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_TUIC_Client is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Simple_Obfs is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2 is not set
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun is not set

# LuCI: TurboACC（仅 UI；kmod 请在路由器按内核版本用 opkg 安）
CONFIG_PACKAGE_luci-app-turboacc=y
EOF
          rm -f .config .config.old
          cp seed.config .config
          make defconfig

      # ---------- 先编 LuCI host 工具（po2lmo） ----------
      - name: Build LuCI host tools (po2lmo)
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          make package/feeds/luci/luci-base/host/compile V=s

      # ---------- 编译 SSR Plus（单线程更稳；失败尾部日志） ----------
      - name: Build luci-app-ssr-plus
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          echo "CPU: $(nproc) cores"
          if ! make -j1 package/feeds/helloworld/luci-app-ssr-plus/compile V=s; then
            echo "----- TAIL last 400 lines from logs -----"
            tail -n 400 logs/*.txt 2>/dev/null || true
            find build_dir -maxdepth 3 -type f -name "*.log" -print -exec tail -n 80 {} \; 2>/dev/null || true
            exit 1
          fi

      # ---------- 编译 TurboACC（LuCI 界面，不编任何 kmod） ----------
      - name: Build luci-app-turboacc
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          if ! make package/feeds/turboacc/luci-app-turboacc/{download,compile} -j"$(nproc)" V=s; then
            echo "----- TAIL last 400 lines from logs -----"
            tail -n 400 logs/*.txt 2>/dev/null || true
            find build_dir -maxdepth 3 -type f -name "*.log" -print -exec tail -n 80 {} \; 2>/dev/null || true
            exit 1
          fi

      # ---------- 收集产物 ----------
      - name: Collect outputs
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          mkdir -p _out
          find bin/packages -type f -name "*.ipk" -exec cp -v {} _out/ \; || true
          echo "OUT_DIR=$(pwd)/_out" >> "$GITHUB_ENV"

      - name: Upload IPKs
        uses: actions/upload-artifact@v4
        with:
          name: ipks-${{ env.SDK_VER }}-x86_64
          path: ${{ env.OUT_DIR }}
          retention-days: 14

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: ${{ env.SDK_DIR }}/logs
          retention-days: 14

      # ---------- 失败/成功都保存缓存（“打不动就重来”仍可复用） ----------
      - name: Save cache: dl
        if: always()
        uses: actions/cache/save@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ env.SDK_VER }}-x86_64-run-${{ github.run_id }}

      - name: Save cache: ccache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ env.SDK_VER }}-x86_64-${{ github.ref_name }}-run-${{ github.run_id }}

      - name: Save cache: host toolchains
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.SDK_DIR }}/staging_dir/host
            ${{ env.SDK_DIR }}/staging_dir/hostpkg
            ${{ env.SDK_DIR }}/build_dir/host
            ${{ env.SDK_DIR }}/build_dir/target-x86_64_musl/host
          key: host-${{ env.SDK_VER }}-x86_64-run-${{ github.run_id }}
