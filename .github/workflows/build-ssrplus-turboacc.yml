name: Build SSR Plus + TurboACC (23.05.5 x86_64, resumable)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SDK_VER: 23.05.5
      TARGET: x86/64
      SDK_DIR: ${{ github.workspace }}/sdk
      DL_DIR:  ${{ github.workspace }}/dl
      CCACHE_DIR: ${{ github.workspace }}/ccache

    steps:
      - uses: actions/checkout@v4

      - name: "Install deps (Ubuntu 24.04)"
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev rsync unzip zlib1g-dev file \
            wget curl ccache python3 python3-pip python3-venv python3-setuptools
          python3 -m pip install --upgrade pip setuptools wheel

      - name: "Prepare dirs"
        run: |
          mkdir -p "${DL_DIR}" "${CCACHE_DIR}" "${SDK_DIR}"

      # ---- caches ----
      - name: "Cache - dl"
        uses: actions/cache@v4
        with:
          path: ${{ env.DL_DIR }}
          key: dl-${{ env.SDK_VER }}-x86_64-${{ hashFiles('**/feeds.conf.default','**/seed.config') }}
          restore-keys: |
            dl-${{ env.SDK_VER }}-x86_64-

      - name: "Cache - ccache"
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ env.SDK_VER }}-x86_64-${{ github.ref_name }}
          restore-keys: |
            ccache-${{ env.SDK_VER }}-x86_64-

      - name: "Cache - host toolchains"
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.SDK_DIR }}/staging_dir/host
            ${{ env.SDK_DIR }}/staging_dir/hostpkg
            ${{ env.SDK_DIR }}/build_dir/host
            ${{ env.SDK_DIR }}/build_dir/target-x86_64_musl/host
          key: host-${{ env.SDK_VER }}-x86_64-${{ hashFiles('**/feeds.conf.default','**/seed.config') }}
          restore-keys: |
            host-${{ env.SDK_VER }}-x86_64-

      - name: "Download & unpack SDK"
        shell: bash
        run: |
          set -e
          URL="https://downloads.openwrt.org/releases/${SDK_VER}/targets/${TARGET}/openwrt-sdk-${SDK_VER}-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          TUNA="${URL/https:\/\/downloads.openwrt.org/https:\/\/mirrors.tuna.tsinghua.edu.cn/openwrt}"
          SAU="${URL/https:\/\/downloads.openwrt.org/https:\/\/mirrors4.sau.edu.cn/openwrt}"
          if [ ! -f "${SDK_DIR}/include/toplevel.mk" ]; then
            for U in "$URL" "$TUNA" "$SAU"; do
              echo "try $U"
              curl -fL --retry 4 -C - -o sdk.tar.xz "$U" && break
            done
            tar -xJf sdk.tar.xz
            src_dir="$(ls -d openwrt-sdk-${SDK_VER}-x86-64_* | head -n1)"
            rsync -a --delete "$src_dir"/ "${SDK_DIR}/"
            rm -rf "$src_dir"
          fi
          ln -sfn "${DL_DIR}" "${SDK_DIR}/dl"
          echo "CCACHE_DIR=${CCACHE_DIR}" >> "$GITHUB_ENV"

      - name: "Prepare feeds (official + helloworld + turboacc)"
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          {
            printf "%s\n" "src-git packages  https://git.openwrt.org/feed/packages.git;openwrt-23.05"
            printf "%s\n" "src-git luci      https://git.openwrt.org/project/luci.git;openwrt-23.05"
            printf "%s\n" "src-git routing   https://git.openwrt.org/feed/routing.git;openwrt-23.05"
            printf "%s\n" "src-git telephony https://git.openwrt.org/feed/telephony.git;openwrt-23.05"
            printf "%s\n" "src-git helloworld https://github.com/fw876/helloworld"
            printf "%s\n" "src-git turboacc   https://github.com/chenmozhijin/turboacc.git"
          } > feeds.conf.default

          ./scripts/feeds clean
          ./scripts/feeds update -a
          ./scripts/feeds install -p helloworld luci-app-ssr-plus
          ./scripts/feeds install -p turboacc   luci-app-turboacc

      - name: "Seed .config (SSR libev only + TurboACC UI)"
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          {
            printf "%s\n" "CONFIG_TARGET_x86=y"
            printf "%s\n" "CONFIG_TARGET_x86_64=y"

            printf "%s\n" "CONFIG_PACKAGE_luci-app-ssr-plus=y"
            printf "%s\n" "CONFIG_PACKAGE_shadowsocksr-libev-ssr-redir=y"
            printf "%s\n" "CONFIG_PACKAGE_shadowsocksr-libev-ssr-local=y"
            printf "%s\n" "CONFIG_PACKAGE_shadowsocksr-libev-ssr-check=y"
            printf "%s\n" "CONFIG_PACKAGE_shadowsocksr-libev-ssr-server=n"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_SingBox is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Hysteria is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan_GO is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_TUIC_Client is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Simple_Obfs is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2 is not set"
            printf "%s\n" "# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun is not set"

            printf "%s\n" "CONFIG_PACKAGE_luci-app-turboacc=y"
          } > seed.config

          rm -f .config .config.old
          cp seed.config .config
          make defconfig

      # ----（可选）修 feed 的依赖，确保带上 libpcre2-8 ----
      - name: "Hotfix: ensure shadowsocksr-libev depends on libpcre2-8"
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          MF="feeds/helloworld/shadowsocksr-libev/Makefile"
          if [ -f "$MF" ] && ! grep -q 'libpcre2-8' "$MF"; then
            sed -i 's/^DEPENDS:=/DEPENDS:=+libpcre2-8 /' "$MF"
            echo "[hotfix] added +libpcre2-8 to DEPENDS"
          fi

      # ---- 强制选择 libpcre2-8 并预编 pcre2，修复你遇到的报错 ----
      - name: "Force select libpcre2-8 & defconfig"
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          if grep -q '^CONFIG_PACKAGE_libpcre2-8=' .config; then
            sed -i 's/^CONFIG_PACKAGE_libpcre2-8=.*/CONFIG_PACKAGE_libpcre2-8=y/' .config
          else
            echo 'CONFIG_PACKAGE_libpcre2-8=y' >> .config
          fi
          # 常见依赖，也一并打开（存在则覆盖）
          grep -q '^CONFIG_PACKAGE_libmbedtls=' .config && \
            sed -i 's/^CONFIG_PACKAGE_libmbedtls=.*/CONFIG_PACKAGE_libmbedtls=y/' .config || \
            echo 'CONFIG_PACKAGE_libmbedtls=y' >> .config
          make defconfig

      - name: "Prebuild deps (pcre2, mbedtls)"
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          make package/feeds/packages/pcre2/compile V=s
          make package/feeds/packages/mbedtls/compile V=s || true

      - name: "Build LuCI host tools (po2lmo)"
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          make package/feeds/luci/luci-base/host/compile V=s

      - name: "Build luci-app-ssr-plus"
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          if ! make -j1 package/feeds/helloworld/luci-app-ssr-plus/compile V=s; then
            echo "----- LOG TAIL -----"
            tail -n 400 logs/*.txt 2>/dev/null || true
            find build_dir -maxdepth 3 -type f -name "*.log" -print -exec tail -n 80 {} \; 2>/dev/null || true
            exit 1
          fi

      - name: "Build luci-app-turboacc"
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          if ! make package/feeds/turboacc/luci-app-turboacc/{download,compile} -j"$(nproc)" V=s; then
            echo "----- LOG TAIL -----"
            tail -n 400 logs/*.txt 2>/dev/null || true
            find build_dir -maxdepth 3 -type f -name "*.log" -print -exec tail -n 80 {} \; 2>/dev/null || true
            exit 1
          fi

      - name: "Collect outputs"
        shell: bash
        run: |
          set -e
          cd "${SDK_DIR}"
          mkdir -p _out
          find bin/packages -type f -name "*.ipk" -exec cp -v {} _out/ \; || true
          echo "OUT_DIR=$(pwd)/_out" >> "$GITHUB_ENV"

      - name: "Upload IPKs"
        uses: actions/upload-artifact@v4
        with:
          name: ipks-${{ env.SDK_VER }}-x86_64
          path: ${{ env.OUT_DIR }}
          retention-days: 14

      - name: "Upload build logs"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: ${{ env.SDK_DIR }}/logs
          retention-days: 14
