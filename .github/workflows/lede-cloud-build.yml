name: Build LEDE (coolsnowwolf/lede)

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'LEDE 源码仓库地址'
        required: true
        default: 'https://github.com/coolsnowwolf/lede'
      repo_branch:
        description: '源码分支'
        required: true
        default: 'master'
      config_path:
        description: '你仓库内的 .config 路径（例如 configs/x86_64.config）。若留空则要求已在 lede 目录预置 .config'
        required: false
        default: ''
      feeds_conf_path:
        description: '你仓库内的 feeds.conf.default 路径（可选，例如 feeds/feeds.conf.default）'
        required: false
        default: ''
      files_dir:
        description: '你仓库内要覆盖到固件的 files 目录路径（可选，例如 overlay/files）'
        required: false
        default: ''
      use_ccache:
        description: '启用 ccache（加速二次构建）'
        type: boolean
        required: true
        default: true
      upload_artifacts:
        description: '上传编译产物为 Artifacts'
        type: boolean
        required: true
        default: true
      make_jobs:
        description: 'make 并行线程数（留空自动 = nproc）'
        required: false
        default: ''
      enable_ssh:
        description: '启用 SSH 调试（tmate），失败卡关时可选'
        type: boolean
        required: true
        default: false
      do_release:
        description: '构建完成后自动创建 Release 并上传产物'
        type: boolean
        required: true
        default: false
      release_tag:
        description: 'Release tag（留空则使用 lede-年月日-时分）'
        required: false
        default: ''

permissions:
  contents: write

concurrency:
  group: lede-build-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-24.04

    env:
      TZ: Asia/Singapore
      REPO_URL: ${{ inputs.repo_url }}
      REPO_BRANCH: ${{ inputs.repo_branch }}
      CONFIG_PATH: ${{ inputs.config_path }}
      FEEDS_CONF_PATH: ${{ inputs.feeds_conf_path }}
      FILES_DIR: ${{ inputs.files_dir }}
      USE_CCACHE: ${{ inputs.use_ccache }}
      UPLOAD_ARTIFACTS: ${{ inputs.upload_artifacts }}
      MAKE_JOBS: ${{ inputs.make_jobs }}
      ENABLE_SSH: ${{ inputs.enable_ssh }}
      DO_RELEASE: ${{ inputs.do_release }}
      RELEASE_TAG: ${{ inputs.release_tag }}

    steps:
      - name: Checkout (your helper repo)
        uses: actions/checkout@v4

      - name: Show runner disk usage (before cleanup)
        run: |
            df -h
            sudo lsblk

      - name: Free disk space
        run: |
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true
          sudo rm -rf /opt/hostedtoolcache/Java || true
          sudo rm -rf /opt/hostedtoolcache/Python/3.8* || true
          sudo rm -rf /opt/hostedtoolcache/Python/3.9* || true
          sudo apt-get clean
          sudo docker image prune -af || true
          df -h

      - name: Setup swap (8G) to reduce OOM
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          swapon -s
          free -h

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison \
            build-essential bzip2 ccache cmake cpio curl device-tree-compiler \
            fastjar flex gawk gettext git gperf haveged help2man intltool jq \
            libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
            libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
            libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip-full \
            patch pkg-config python3 python3-distutils python3-pip qemu-utils rsync \
            scons subversion swig texinfo uglifyjs unzip upx-ucl wget \
            xz-utils zlib1g-dev
          python3 -V
          gcc --version

      - name: Prepare ccache
        if: env.USE_CCACHE == 'true'
        run: |
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          echo "USE_CCACHE=1" >> $GITHUB_ENV
          ccache -M 5G || true
          ccache -s || true

      - name: Cache ccache
        if: env.USE_CCACHE == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-${{ github.workflow }}-${{ github.ref_name }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.workflow }}-

      - name: Clone LEDE
        run: |
          git clone --depth 1 -b "${REPO_BRANCH}" "${REPO_URL}" lede
          cd lede
          echo "LEDE head:" && git log -1 --oneline

      - name: Inject custom feeds.conf.default (optional)
        if: env.FEEDS_CONF_PATH != ''
        run: |
          test -f "${FEEDS_CONF_PATH}" || { echo "Feeds file not found: ${FEEDS_CONF_PATH}"; exit 1; }
          cp -f "${FEEDS_CONF_PATH}" lede/feeds.conf.default
          echo "Injected feeds.conf.default from ${FEEDS_CONF_PATH}"

      - name: Update & install feeds
        working-directory: lede
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Inject files/ overlay (optional)
        if: env.FILES_DIR != ''
        run: |
          test -d "${FILES_DIR}" || { echo "Files overlay not found: ${FILES_DIR}"; exit 1; }
          mkdir -p lede/files
          rsync -aH --delete "${FILES_DIR}/" lede/files/
          echo "Injected overlay files/ from ${FILES_DIR}"

      - name: Prepare .config
        run: |
          set -e
          cd lede
          if [ -n "${CONFIG_PATH}" ]; then
            echo "Using external config: ${CONFIG_PATH}"
            cp -f "${GITHUB_WORKSPACE}/${CONFIG_PATH}" .config
          fi
          if [ ! -f .config ]; then
            echo "::error::没有找到 .config。请在 workflow 输入 config_path 指向你仓库内的配置，或预先将 .config 放在 lede/ 目录。"
            exit 1
          fi
          # 生成最完整的 .config
          make defconfig
          echo "==== Final .config head ===="
          head -n 50 .config || true
          echo "============================"

      - name: Cache dl (source tarballs)
        uses: actions/cache@v4
        with:
          path: lede/dl
          key: dl-${{ runner.os }}-${{ hashFiles('**/.config') }}
          restore-keys: |
            dl-${{ runner.os }}-

      - name: Download sources
        working-directory: lede
        run: |
          MAKEJ="${MAKE_JOBS}"
          if [ -z "$MAKEJ" ]; then MAKEJ=$(nproc); fi
          make download -j"$MAKEJ" V=s

      - name: Optional SSH (tmate) for debugging
        if: env.ENABLE_SSH == 'true'
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        timeout-minutes: 60

      - name: Build firmware
        working-directory: lede
        run: |
          MAKEJ="${MAKE_JOBS}"
          if [ -z "$MAKEJ" ]; then MAKEJ=$(nproc); fi
          echo "Start build with -j$MAKEJ"
          # 首次尽量并行；失败则降级串行便于日志定位
          (make -j"$MAKEJ" V=s) || (echo "Parallel build failed, retry with -j1"; make -j1 V=s)
          echo "Build finished."
          du -h --max-depth=2 bin/targets || true

      - name: Summarize outputs
        working-directory: lede
        run: |
          echo "Targets produced under lede/bin/targets:"
          find bin/targets -maxdepth 3 -type f -iname '*.bin' -o -iname '*.img*' -o -iname '*.tar*' -o -iname '*.trx' -o -iname '*.itb' -o -iname '*squashfs*' | sed 's/^/ - /' || true

      - name: Upload artifacts (bin/targets)
        if: env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lede-targets-${{ github.run_id }}
          path: lede/bin/targets/**/*
          if-no-files-found: warn
          compression-level: 6
          retention-days: 7

      - name: Upload artifacts (bin/packages)
        if: env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lede-packages-${{ github.run_id }}
          path: lede/bin/packages/**/* 
          if-no-files-found: warn
          compression-level: 6
          retention-days: 7

      - name: Create Release
        if: env.DO_RELEASE == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG != '' && env.RELEASE_TAG || format('lede-{0,date,yyyyMMdd-HHmm}', github.event.created_at) }}
          name: ${{ env.RELEASE_TAG != '' && env.RELEASE_TAG || format('LEDE Build {0,date,yyyy-MM-dd HH:mm}', github.event.created_at) }}
          body: |
            - Repo: ${{ env.REPO_URL }} @ ${{ env.REPO_BRANCH }}
            - Config: ${{ env.CONFIG_PATH || '.config in repo root' }}
            - Runner: ${{ runner.os }} / ${{ runner.name }}
            - Triggered by: ${{ github.actor }}
          draft: false
          prerelease: false
          files: |
            lede/bin/targets/**/*

      - name: Show runner disk usage (after build)
        run: df -h
